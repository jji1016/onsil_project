CREATE TABLE MEMBER (
                        MEMBERID NUMBER PRIMARY KEY,
                        USERID VARCHAR2(100) UNIQUE NOT NULL,
                        NICKNAME VARCHAR2(100) UNIQUE NOT NULL,
                        USERNAME VARCHAR2(100) NOT NULL,
                        USERPW VARCHAR2(255) NOT NULL, -- 해시 저장 고려
                        USEREMAIL VARCHAR2(50) UNIQUE NOT NULL,
                        ADDRESS VARCHAR2(100) NOT NULL,
                        TEL VARCHAR2(30) NOT NULL,
                        REGDATE DATE DEFAULT SYSDATE,
                        ROLE VARCHAR2(20) NOT NULL,
                        CONSTRAINT CHK_MEMBER_ROLE CHECK (ROLE IN ('admin', 'member'))
);

SELECT * FROM MEMBER;

CREATE TABLE PRODUCT (
                         PRODUCTID NUMBER PRIMARY KEY,
                         FLOWERNAME VARCHAR2(100) NOT NULL,
                         PRICE NUMBER NOT NULL,
                         FLOWERINFO VARCHAR2(1000) NOT NULL,
                         IMAGE VARCHAR2(100) NOT NULL
);
SELECT * FROM PRODUCT;

CREATE TABLE CART (
                      CARTID NUMBER PRIMARY KEY,
                      PRODUCTID NUMBER,
                      MEMBERID NUMBER,
                      ORDERDATE DATE DEFAULT SYSDATE,
                      CONSTRAINT FK_CART_PRODUCT FOREIGN KEY (PRODUCTID) REFERENCES PRODUCT(PRODUCTID),
                      CONSTRAINT FK_CART_MEMBER FOREIGN KEY (MEMBERID) REFERENCES MEMBER(MEMBERID)
);
SELECT * FROM cart;

CREATE TABLE REVIEW (
                        REVIEWID NUMBER PRIMARY KEY,
                        PRODUCTID NUMBER,
                        MEMBERID NUMBER,
                        CONTENT VARCHAR2(1000) NOT NULL,
                        RATING NUMBER(1), -- 1~5 정도를 가정
                        REGDATE DATE DEFAULT SYSDATE,
                        IMAGE VARCHAR2(100),
                        CONSTRAINT FK_REVIEW_PRODUCT FOREIGN KEY (PRODUCTID) REFERENCES PRODUCT(PRODUCTID),
                        CONSTRAINT FK_REVIEW_MEMBER FOREIGN KEY (MEMBERID) REFERENCES MEMBER(MEMBERID),
                        CONSTRAINT CHK_REVIEW_RATING CHECK (RATING BETWEEN 1 AND 5)
);
SELECT * FROM REVIEW;

CREATE TABLE SUBSCRIBE (
                           SUBSCRIBEID NUMBER PRIMARY KEY,
                           PRODUCTID NUMBER,
                           MEMBERID NUMBER,
                           STARTDATE DATE NOT NULL,
                           ENDDATE DATE NOT NULL,
                           PERIOD VARCHAR2(100) NOT NULL,
                           CONSTRAINT FK_SUBSCRIBE_PRODUCT FOREIGN KEY (PRODUCTID) REFERENCES PRODUCT(PRODUCTID),
                           CONSTRAINT FK_SUBSCRIBE_MEMBER FOREIGN KEY (MEMBERID) REFERENCES MEMBER(MEMBERID)
);
SELECT * FROM SUBSCRIBE;

CREATE TABLE ORDERLIST (
                           ORDERLISTID NUMBER PRIMARY KEY,
                           MEMBERID NUMBER,
                           PRODUCTID NUMBER,
                           ORDERTIME DATE DEFAULT SYSDATE,
                           QUANTITY NUMBER DEFAULT 1 NOT NULL,
                           STATUS VARCHAR2(20) DEFAULT 'ORDERED',
                           CONSTRAINT FK_ORDERLIST_MEMBER FOREIGN KEY (MEMBERID) REFERENCES MEMBER(MEMBERID),
                           CONSTRAINT FK_ORDERLIST_PRODUCT FOREIGN KEY (PRODUCTID) REFERENCES PRODUCT(PRODUCTID),
                           CONSTRAINT CHK_ORDERLIST_STATUS CHECK (STATUS IN ('ORDERED', 'SHIPPED', 'DELIVERED', 'CANCELED'))
);
SELECT * FROM ORDERLIST;

CREATE TABLE STOCK (
                       STOCKID NUMBER PRIMARY KEY,
                       PRODUCTID NUMBER,
                       QUANTITY NUMBER NOT NULL,
                       CONSTRAINT FK_STOCK_PRODUCT FOREIGN KEY (PRODUCTID) REFERENCES PRODUCT(PRODUCTID)
);
SELECT * FROM STOCK;

CREATE TABLE INPUT (
                       INPUTID NUMBER PRIMARY KEY,
                       PRODUCTID NUMBER,
                       AMOUNT NUMBER NOT NULL,
                       COMPANY VARCHAR2(100) DEFAULT 'flipflower' NOT NULL,
                       REGDATE DATE DEFAULT SYSDATE,
                       CONSTRAINT FK_INPUT_PRODUCT FOREIGN KEY (PRODUCTID) REFERENCES PRODUCT(PRODUCTID)
);
SELECT * FROM INPUT;

    CREATE TABLE OUTPUT (
    OUTPUTID NUMBER PRIMARY KEY,
    PRODUCTID NUMBER,
    MEMBERID NUMBER,
    AMOUNT NUMBER NOT NULL,
    REGDATE DATE DEFAULT SYSDATE,
    CONSTRAINT FK_OUTPUT_PRODUCT FOREIGN KEY (PRODUCTID) REFERENCES PRODUCT(PRODUCTID),
    CONSTRAINT FK_OUTPUT_MEMBER FOREIGN KEY (MEMBERID) REFERENCES MEMBER(MEMBERID)
);
SELECT * FROM OUTPUT;

COMMIT;